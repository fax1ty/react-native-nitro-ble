///
/// AdapterState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::bluetooth {

  /**
   * An enum which can be represented as a JavaScript union (AdapterState).
   */
  enum class AdapterState {
    DISABLED      SWIFT_NAME(disabled) = 0,
    TURNING_ON      SWIFT_NAME(turningOn) = 1,
    ENABLED      SWIFT_NAME(enabled) = 2,
    TURNING_OFF      SWIFT_NAME(turningOff) = 3,
  } CLOSED_ENUM;

} // namespace margelo::nitro::bluetooth

namespace margelo::nitro {

  // C++ AdapterState <> JS AdapterState (union)
  template <>
  struct JSIConverter<margelo::nitro::bluetooth::AdapterState> final {
    static inline margelo::nitro::bluetooth::AdapterState fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("disabled"): return margelo::nitro::bluetooth::AdapterState::DISABLED;
        case hashString("turning-on"): return margelo::nitro::bluetooth::AdapterState::TURNING_ON;
        case hashString("enabled"): return margelo::nitro::bluetooth::AdapterState::ENABLED;
        case hashString("turning-off"): return margelo::nitro::bluetooth::AdapterState::TURNING_OFF;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum AdapterState - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::bluetooth::AdapterState arg) {
      switch (arg) {
        case margelo::nitro::bluetooth::AdapterState::DISABLED: return JSIConverter<std::string>::toJSI(runtime, "disabled");
        case margelo::nitro::bluetooth::AdapterState::TURNING_ON: return JSIConverter<std::string>::toJSI(runtime, "turning-on");
        case margelo::nitro::bluetooth::AdapterState::ENABLED: return JSIConverter<std::string>::toJSI(runtime, "enabled");
        case margelo::nitro::bluetooth::AdapterState::TURNING_OFF: return JSIConverter<std::string>::toJSI(runtime, "turning-off");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert AdapterState to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("disabled"):
        case hashString("turning-on"):
        case hashString("enabled"):
        case hashString("turning-off"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
