///
/// JHybridBluetoothDeviceSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBluetoothDeviceSpec.hpp"

// Forward declaration of `BluetoothDeviceState` to properly resolve imports.
namespace margelo::nitro::bluetooth { enum class BluetoothDeviceState; }
// Forward declaration of `HybridBluetoothDeviceServiceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceServiceSpec; }

#include <string>
#include "BluetoothDeviceState.hpp"
#include "JBluetoothDeviceState.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <memory>
#include "HybridBluetoothDeviceServiceSpec.hpp"
#include "JHybridBluetoothDeviceServiceSpec.hpp"

namespace margelo::nitro::bluetooth {

  jni::local_ref<JHybridBluetoothDeviceSpec::jhybriddata> JHybridBluetoothDeviceSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBluetoothDeviceSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBluetoothDeviceSpec::initHybrid),
    });
  }

  size_t JHybridBluetoothDeviceSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridBluetoothDeviceSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  std::string JHybridBluetoothDeviceSpec::getAddress() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getAddress");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  std::string JHybridBluetoothDeviceSpec::getKnownName() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getKnownName");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  BluetoothDeviceState JHybridBluetoothDeviceSpec::getState() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JBluetoothDeviceState>()>("getState");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }

  // Methods
  std::shared_ptr<Promise<void>> JHybridBluetoothDeviceSpec::connect() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("connect");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBluetoothDeviceSpec::disconnect() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("disconnect");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>> JHybridBluetoothDeviceSpec::service(const std::string& uuid) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* uuid */)>("service");
    auto __result = method(_javaPart, jni::make_jstring(uuid));
    return [&]() {
      auto __promise = Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JHybridBluetoothDeviceServiceSpec::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->shared_cast<JHybridBluetoothDeviceServiceSpec>());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::bluetooth
