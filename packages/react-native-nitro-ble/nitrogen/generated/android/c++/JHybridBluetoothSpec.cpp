///
/// JHybridBluetoothSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBluetoothSpec.hpp"

// Forward declaration of `AdapterState` to properly resolve imports.
namespace margelo::nitro::bluetooth { enum class AdapterState; }
// Forward declaration of `HybridScanHandleSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridScanHandleSpec; }
// Forward declaration of `HybridBluetoothDeviceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceSpec; }

#include "AdapterState.hpp"
#include "JAdapterState.hpp"
#include <memory>
#include "HybridScanHandleSpec.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "JHybridScanHandleSpec.hpp"
#include "HybridBluetoothDeviceSpec.hpp"
#include <vector>
#include "JHybridBluetoothDeviceSpec.hpp"

namespace margelo::nitro::bluetooth {

  jni::local_ref<JHybridBluetoothSpec::jhybriddata> JHybridBluetoothSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBluetoothSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBluetoothSpec::initHybrid),
    });
  }

  size_t JHybridBluetoothSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridBluetoothSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  AdapterState JHybridBluetoothSpec::getState() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JAdapterState>()>("getState");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }

  // Methods
  std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>> JHybridBluetoothSpec::scan() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("scan");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::shared_ptr<HybridScanHandleSpec>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JHybridScanHandleSpec::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->shared_cast<JHybridScanHandleSpec>());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>> JHybridBluetoothSpec::devices() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JArrayClass<JHybridBluetoothDeviceSpec::javaobject>>()>("devices");
    auto __result = method(_javaPart);
    return [&]() {
      size_t __size = __result->size();
      std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>> __vector;
      __vector.reserve(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        auto __element = __result->getElement(__i);
        __vector.push_back(__element->cthis()->shared_cast<JHybridBluetoothDeviceSpec>());
      }
      return __vector;
    }();
  }

} // namespace margelo::nitro::bluetooth
