///
/// JAdapterState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "AdapterState.hpp"

namespace margelo::nitro::bluetooth {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "AdapterState" and the the Kotlin enum "AdapterState".
   */
  struct JAdapterState final: public jni::JavaClass<JAdapterState> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bluetooth/AdapterState;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum AdapterState.
     */
    [[maybe_unused]]
    [[nodiscard]]
    AdapterState toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<AdapterState>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JAdapterState> fromCpp(AdapterState value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldDISABLED = clazz->getStaticField<JAdapterState>("DISABLED");
      static const auto fieldTURNING_ON = clazz->getStaticField<JAdapterState>("TURNING_ON");
      static const auto fieldENABLED = clazz->getStaticField<JAdapterState>("ENABLED");
      static const auto fieldTURNING_OFF = clazz->getStaticField<JAdapterState>("TURNING_OFF");
      
      switch (value) {
        case AdapterState::DISABLED:
          return clazz->getStaticFieldValue(fieldDISABLED);
        case AdapterState::TURNING_ON:
          return clazz->getStaticFieldValue(fieldTURNING_ON);
        case AdapterState::ENABLED:
          return clazz->getStaticFieldValue(fieldENABLED);
        case AdapterState::TURNING_OFF:
          return clazz->getStaticFieldValue(fieldTURNING_OFF);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::bluetooth
