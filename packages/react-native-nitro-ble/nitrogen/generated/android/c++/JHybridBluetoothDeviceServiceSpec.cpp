///
/// JHybridBluetoothDeviceServiceSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBluetoothDeviceServiceSpec.hpp"

// Forward declaration of `HybridBluetoothDeviceServiceCharacteristicSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceServiceCharacteristicSpec; }

#include <memory>
#include "HybridBluetoothDeviceServiceCharacteristicSpec.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "JHybridBluetoothDeviceServiceCharacteristicSpec.hpp"
#include <string>

namespace margelo::nitro::bluetooth {

  jni::local_ref<JHybridBluetoothDeviceServiceSpec::jhybriddata> JHybridBluetoothDeviceServiceSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBluetoothDeviceServiceSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBluetoothDeviceServiceSpec::initHybrid),
    });
  }

  size_t JHybridBluetoothDeviceServiceSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridBluetoothDeviceServiceSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>> JHybridBluetoothDeviceServiceSpec::characteristic(const std::string& uuid) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* uuid */)>("characteristic");
    auto __result = method(_javaPart, jni::make_jstring(uuid));
    return [&]() {
      auto __promise = Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JHybridBluetoothDeviceServiceCharacteristicSpec::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->shared_cast<JHybridBluetoothDeviceServiceCharacteristicSpec>());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::bluetooth
