///
/// JHybridScanHandleSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridScanHandleSpec.hpp"

// Forward declaration of `HybridBluetoothDeviceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceSpec; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <functional>
#include "JFunc_void.hpp"
#include <memory>
#include "HybridBluetoothDeviceSpec.hpp"
#include "JFunc_void_std__shared_ptr_HybridBluetoothDeviceSpec_.hpp"
#include "JHybridBluetoothDeviceSpec.hpp"
#include "JFunc_void_double.hpp"

namespace margelo::nitro::bluetooth {

  jni::local_ref<JHybridScanHandleSpec::jhybriddata> JHybridScanHandleSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridScanHandleSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridScanHandleSpec::initHybrid),
    });
  }

  size_t JHybridScanHandleSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridScanHandleSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<void>> JHybridScanHandleSpec::stop() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("stop");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::function<void()> JHybridScanHandleSpec::onDevice(const std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void::javaobject>(jni::alias_ref<JFunc_void_std__shared_ptr_HybridBluetoothDeviceSpec_::javaobject> /* callback */)>("onDevice_cxx");
    auto __result = method(_javaPart, JFunc_void_std__shared_ptr_HybridBluetoothDeviceSpec__cxx::fromCpp(callback));
    return [&]() -> std::function<void()> {
      if (__result->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef]() -> void {
          return __resultRef->invoke();
        };
      }
    }();
  }
  std::function<void()> JHybridScanHandleSpec::onError(const std::function<void(double /* error */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void::javaobject>(jni::alias_ref<JFunc_void_double::javaobject> /* callback */)>("onError_cxx");
    auto __result = method(_javaPart, JFunc_void_double_cxx::fromCpp(callback));
    return [&]() -> std::function<void()> {
      if (__result->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef]() -> void {
          return __resultRef->invoke();
        };
      }
    }();
  }

} // namespace margelo::nitro::bluetooth
