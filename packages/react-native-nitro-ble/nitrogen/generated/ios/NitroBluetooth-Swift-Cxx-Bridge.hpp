///
/// NitroBluetooth-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `HybridBluetoothDeviceServiceCharacteristicSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceServiceCharacteristicSpec; }
// Forward declaration of `HybridBluetoothDeviceServiceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceServiceSpec; }
// Forward declaration of `HybridBluetoothDeviceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceSpec; }
// Forward declaration of `HybridBluetoothSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothSpec; }
// Forward declaration of `HybridScanHandleSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridScanHandleSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridBluetoothDeviceServiceCharacteristicSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridBluetoothDeviceServiceCharacteristicSpec_cxx; }
// Forward declaration of `HybridBluetoothDeviceServiceSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridBluetoothDeviceServiceSpec_cxx; }
// Forward declaration of `HybridBluetoothDeviceSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridBluetoothDeviceSpec_cxx; }
// Forward declaration of `HybridBluetoothSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridBluetoothSpec_cxx; }
// Forward declaration of `HybridScanHandleSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridScanHandleSpec_cxx; }

// Include C++ defined types
#include "HybridBluetoothDeviceServiceCharacteristicSpec.hpp"
#include "HybridBluetoothDeviceServiceSpec.hpp"
#include "HybridBluetoothDeviceSpec.hpp"
#include "HybridBluetoothSpec.hpp"
#include "HybridScanHandleSpec.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::bluetooth::bridge::swift {

  // pragma MARK: std::shared_ptr<HybridScanHandleSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridScanHandleSpec>`.
   */
  using std__shared_ptr_HybridScanHandleSpec_ = std::shared_ptr<HybridScanHandleSpec>;
  std::shared_ptr<HybridScanHandleSpec> create_std__shared_ptr_HybridScanHandleSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridScanHandleSpec_(std__shared_ptr_HybridScanHandleSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridScanHandleSpec>
  using std__weak_ptr_HybridScanHandleSpec_ = std::weak_ptr<HybridScanHandleSpec>;
  inline std__weak_ptr_HybridScanHandleSpec_ weakify_std__shared_ptr_HybridScanHandleSpec_(const std::shared_ptr<HybridScanHandleSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec___ = std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>> create_std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec___() noexcept {
    return Promise<std::shared_ptr<HybridScanHandleSpec>>::create();
  }
  inline PromiseHolder<std::shared_ptr<HybridScanHandleSpec>> wrap_std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec___(std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>> promise) noexcept {
    return PromiseHolder<std::shared_ptr<HybridScanHandleSpec>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridScanHandleSpec>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<HybridScanHandleSpec>&)>`.
   */
  using Func_void_std__shared_ptr_HybridScanHandleSpec_ = std::function<void(const std::shared_ptr<HybridScanHandleSpec>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<HybridScanHandleSpec>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_HybridScanHandleSpec__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_HybridScanHandleSpec__Wrapper(std::function<void(const std::shared_ptr<HybridScanHandleSpec>& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::shared_ptr<HybridScanHandleSpec>& /* result */)>>(std::move(func))) {}
    inline void call(std::shared_ptr<HybridScanHandleSpec> result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const std::shared_ptr<HybridScanHandleSpec>& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__shared_ptr_HybridScanHandleSpec_ create_Func_void_std__shared_ptr_HybridScanHandleSpec_(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__shared_ptr_HybridScanHandleSpec__Wrapper wrap_Func_void_std__shared_ptr_HybridScanHandleSpec_(Func_void_std__shared_ptr_HybridScanHandleSpec_ value) noexcept {
    return Func_void_std__shared_ptr_HybridScanHandleSpec__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_unique<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const noexcept {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) noexcept {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothDeviceSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridBluetoothDeviceSpec>`.
   */
  using std__shared_ptr_HybridBluetoothDeviceSpec_ = std::shared_ptr<HybridBluetoothDeviceSpec>;
  std::shared_ptr<HybridBluetoothDeviceSpec> create_std__shared_ptr_HybridBluetoothDeviceSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridBluetoothDeviceSpec_(std__shared_ptr_HybridBluetoothDeviceSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridBluetoothDeviceSpec>
  using std__weak_ptr_HybridBluetoothDeviceSpec_ = std::weak_ptr<HybridBluetoothDeviceSpec>;
  inline std__weak_ptr_HybridBluetoothDeviceSpec_ weakify_std__shared_ptr_HybridBluetoothDeviceSpec_(const std::shared_ptr<HybridBluetoothDeviceSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>
  /**
   * Specialized version of `std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>`.
   */
  using std__vector_std__shared_ptr_HybridBluetoothDeviceSpec__ = std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>;
  inline std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>> create_std__vector_std__shared_ptr_HybridBluetoothDeviceSpec__(size_t size) noexcept {
    std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridBluetoothSpec>`.
   */
  using std__shared_ptr_HybridBluetoothSpec_ = std::shared_ptr<HybridBluetoothSpec>;
  std::shared_ptr<HybridBluetoothSpec> create_std__shared_ptr_HybridBluetoothSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridBluetoothSpec_(std__shared_ptr_HybridBluetoothSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridBluetoothSpec>
  using std__weak_ptr_HybridBluetoothSpec_ = std::weak_ptr<HybridBluetoothSpec>;
  inline std__weak_ptr_HybridBluetoothSpec_ weakify_std__shared_ptr_HybridBluetoothSpec_(const std::shared_ptr<HybridBluetoothSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>>
  using Result_std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec____ = Result<std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>>;
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec____(const std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>& value) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridScanHandleSpec____(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>>
  using Result_std__vector_std__shared_ptr_HybridBluetoothDeviceSpec___ = Result<std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>>;
  inline Result_std__vector_std__shared_ptr_HybridBluetoothDeviceSpec___ create_Result_std__vector_std__shared_ptr_HybridBluetoothDeviceSpec___(const std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>& value) noexcept {
    return Result<std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>>::withValue(value);
  }
  inline Result_std__vector_std__shared_ptr_HybridBluetoothDeviceSpec___ create_Result_std__vector_std__shared_ptr_HybridBluetoothDeviceSpec___(const std::exception_ptr& error) noexcept {
    return Result<std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<Promise<void>>
  /**
   * Specialized version of `std::shared_ptr<Promise<void>>`.
   */
  using std__shared_ptr_Promise_void__ = std::shared_ptr<Promise<void>>;
  inline std::shared_ptr<Promise<void>> create_std__shared_ptr_Promise_void__() noexcept {
    return Promise<void>::create();
  }
  inline PromiseHolder<void> wrap_std__shared_ptr_Promise_void__(std::shared_ptr<Promise<void>> promise) noexcept {
    return PromiseHolder<void>(std::move(promise));
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const noexcept {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_Wrapper wrap_Func_void(Func_void value) noexcept {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>&)>`.
   */
  using Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_ = std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& / * device * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_HybridBluetoothDeviceSpec__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_HybridBluetoothDeviceSpec__Wrapper(std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>&& func): _function(std::make_unique<std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>>(std::move(func))) {}
    inline void call(std::shared_ptr<HybridBluetoothDeviceSpec> device) const noexcept {
      _function->operator()(device);
    }
  private:
    std::unique_ptr<std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_ create_Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__shared_ptr_HybridBluetoothDeviceSpec__Wrapper wrap_Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_(Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_ value) noexcept {
    return Func_void_std__shared_ptr_HybridBluetoothDeviceSpec__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(double /* error */)>
  /**
   * Specialized version of `std::function<void(double)>`.
   */
  using Func_void_double = std::function<void(double /* error */)>;
  /**
   * Wrapper class for a `std::function<void(double / * error * /)>`, this can be used from Swift.
   */
  class Func_void_double_Wrapper final {
  public:
    explicit Func_void_double_Wrapper(std::function<void(double /* error */)>&& func): _function(std::make_unique<std::function<void(double /* error */)>>(std::move(func))) {}
    inline void call(double error) const noexcept {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(double /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_double create_Func_void_double(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_double_Wrapper wrap_Func_void_double(Func_void_double value) noexcept {
    return Func_void_double_Wrapper(std::move(value));
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<void>>>
  using Result_std__shared_ptr_Promise_void___ = Result<std::shared_ptr<Promise<void>>>;
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::shared_ptr<Promise<void>>& value) noexcept {
    return Result<std::shared_ptr<Promise<void>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<void>>>::withError(error);
  }
  
  // pragma MARK: Result<std::function<void()>>
  using Result_std__function_void____ = Result<std::function<void()>>;
  inline Result_std__function_void____ create_Result_std__function_void____(const std::function<void()>& value) noexcept {
    return Result<std::function<void()>>::withValue(value);
  }
  inline Result_std__function_void____ create_Result_std__function_void____(const std::exception_ptr& error) noexcept {
    return Result<std::function<void()>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothDeviceServiceSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridBluetoothDeviceServiceSpec>`.
   */
  using std__shared_ptr_HybridBluetoothDeviceServiceSpec_ = std::shared_ptr<HybridBluetoothDeviceServiceSpec>;
  std::shared_ptr<HybridBluetoothDeviceServiceSpec> create_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(std__shared_ptr_HybridBluetoothDeviceServiceSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridBluetoothDeviceServiceSpec>
  using std__weak_ptr_HybridBluetoothDeviceServiceSpec_ = std::weak_ptr<HybridBluetoothDeviceServiceSpec>;
  inline std__weak_ptr_HybridBluetoothDeviceServiceSpec_ weakify_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec___ = std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>> create_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec___() noexcept {
    return Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>::create();
  }
  inline PromiseHolder<std::shared_ptr<HybridBluetoothDeviceServiceSpec>> wrap_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec___(std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>> promise) noexcept {
    return PromiseHolder<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>&)>`.
   */
  using Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_ = std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec__Wrapper(std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& /* result */)>>(std::move(func))) {}
    inline void call(std::shared_ptr<HybridBluetoothDeviceServiceSpec> result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_ create_Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec__Wrapper wrap_Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_ value) noexcept {
    return Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec__Wrapper(std::move(value));
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>>
  using Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec____ = Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>>;
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec____(const std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>& value) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceSpec____(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>`.
   */
  using std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ = std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>;
  std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec> create_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>
  using std__weak_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ = std::weak_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>;
  inline std__weak_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ weakify_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec___ = std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>> create_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec___() noexcept {
    return Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>::create();
  }
  inline PromiseHolder<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>> wrap_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec___(std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>> promise) noexcept {
    return PromiseHolder<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>&)>`.
   */
  using Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ = std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec__Wrapper(std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& /* result */)>>(std::move(func))) {}
    inline void call(std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec> result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ create_Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec__Wrapper wrap_Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ value) noexcept {
    return Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec__Wrapper(std::move(value));
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>>
  using Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec____ = Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>>;
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec____(const std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>& value) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec____(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>>>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ = std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> create_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___() noexcept {
    return Promise<std::shared_ptr<ArrayBuffer>>::create();
  }
  inline PromiseHolder<std::shared_ptr<ArrayBuffer>> wrap_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> promise) noexcept {
    return PromiseHolder<std::shared_ptr<ArrayBuffer>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<ArrayBuffer>&)>`.
   */
  using Func_void_std__shared_ptr_ArrayBuffer_ = std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<ArrayBuffer>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_ArrayBuffer__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_ArrayBuffer__Wrapper(std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>>(std::move(func))) {}
    inline void call(ArrayBufferHolder result) const noexcept {
      _function->operator()(result.getArrayBuffer());
    }
  private:
    std::unique_ptr<std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__shared_ptr_ArrayBuffer_ create_Func_void_std__shared_ptr_ArrayBuffer_(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__shared_ptr_ArrayBuffer__Wrapper wrap_Func_void_std__shared_ptr_ArrayBuffer_(Func_void_std__shared_ptr_ArrayBuffer_ value) noexcept {
    return Func_void_std__shared_ptr_ArrayBuffer__Wrapper(std::move(value));
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>
  using Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ = Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>;
  inline Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(const std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>& value) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>::withError(error);
  }

} // namespace margelo::nitro::bluetooth::bridge::swift
