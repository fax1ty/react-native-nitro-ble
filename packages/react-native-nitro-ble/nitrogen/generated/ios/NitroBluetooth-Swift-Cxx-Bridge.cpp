///
/// NitroBluetooth-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "NitroBluetooth-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridBluetoothDeviceServiceCharacteristicSpecSwift.hpp"
#include "HybridBluetoothDeviceServiceSpecSwift.hpp"
#include "HybridBluetoothDeviceSpecSwift.hpp"
#include "HybridBluetoothSpecSwift.hpp"
#include "HybridScanHandleSpecSwift.hpp"
#include "NitroBluetooth-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bluetooth::bridge::swift {

  // pragma MARK: std::shared_ptr<HybridScanHandleSpec>
  std::shared_ptr<HybridScanHandleSpec> create_std__shared_ptr_HybridScanHandleSpec_(void* _Nonnull swiftUnsafePointer) noexcept {
    NitroBluetooth::HybridScanHandleSpec_cxx swiftPart = NitroBluetooth::HybridScanHandleSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::bluetooth::HybridScanHandleSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_HybridScanHandleSpec_(std__shared_ptr_HybridScanHandleSpec_ cppType) noexcept {
    std::shared_ptr<margelo::nitro::bluetooth::HybridScanHandleSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::bluetooth::HybridScanHandleSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridScanHandleSpec\" is not implemented in Swift!");
    }
    #endif
    NitroBluetooth::HybridScanHandleSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridScanHandleSpec>& /* result */)>
  Func_void_std__shared_ptr_HybridScanHandleSpec_ create_Func_void_std__shared_ptr_HybridScanHandleSpec_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void_std__shared_ptr_HybridScanHandleSpec_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::shared_ptr<HybridScanHandleSpec>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void_std__exception_ptr::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::exception_ptr& error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothDeviceSpec>
  std::shared_ptr<HybridBluetoothDeviceSpec> create_std__shared_ptr_HybridBluetoothDeviceSpec_(void* _Nonnull swiftUnsafePointer) noexcept {
    NitroBluetooth::HybridBluetoothDeviceSpec_cxx swiftPart = NitroBluetooth::HybridBluetoothDeviceSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::bluetooth::HybridBluetoothDeviceSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_HybridBluetoothDeviceSpec_(std__shared_ptr_HybridBluetoothDeviceSpec_ cppType) noexcept {
    std::shared_ptr<margelo::nitro::bluetooth::HybridBluetoothDeviceSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::bluetooth::HybridBluetoothDeviceSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridBluetoothDeviceSpec\" is not implemented in Swift!");
    }
    #endif
    NitroBluetooth::HybridBluetoothDeviceSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothSpec>
  std::shared_ptr<HybridBluetoothSpec> create_std__shared_ptr_HybridBluetoothSpec_(void* _Nonnull swiftUnsafePointer) noexcept {
    NitroBluetooth::HybridBluetoothSpec_cxx swiftPart = NitroBluetooth::HybridBluetoothSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::bluetooth::HybridBluetoothSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_HybridBluetoothSpec_(std__shared_ptr_HybridBluetoothSpec_ cppType) noexcept {
    std::shared_ptr<margelo::nitro::bluetooth::HybridBluetoothSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::bluetooth::HybridBluetoothSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridBluetoothSpec\" is not implemented in Swift!");
    }
    #endif
    NitroBluetooth::HybridBluetoothSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }
  
  // pragma MARK: std::function<void()>
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)]() mutable -> void {
      swiftClosure.call();
    };
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>
  Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_ create_Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void_std__shared_ptr_HybridBluetoothDeviceSpec_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::shared_ptr<HybridBluetoothDeviceSpec>& device) mutable -> void {
      swiftClosure.call(device);
    };
  }
  
  // pragma MARK: std::function<void(double /* error */)>
  Func_void_double create_Func_void_double(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void_double::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](double error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothDeviceServiceSpec>
  std::shared_ptr<HybridBluetoothDeviceServiceSpec> create_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(void* _Nonnull swiftUnsafePointer) noexcept {
    NitroBluetooth::HybridBluetoothDeviceServiceSpec_cxx swiftPart = NitroBluetooth::HybridBluetoothDeviceServiceSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::bluetooth::HybridBluetoothDeviceServiceSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(std__shared_ptr_HybridBluetoothDeviceServiceSpec_ cppType) noexcept {
    std::shared_ptr<margelo::nitro::bluetooth::HybridBluetoothDeviceServiceSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::bluetooth::HybridBluetoothDeviceServiceSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridBluetoothDeviceServiceSpec\" is not implemented in Swift!");
    }
    #endif
    NitroBluetooth::HybridBluetoothDeviceServiceSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& /* result */)>
  Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_ create_Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void_std__shared_ptr_HybridBluetoothDeviceServiceSpec_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::shared_ptr<HybridBluetoothDeviceServiceSpec>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>
  std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec> create_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(void* _Nonnull swiftUnsafePointer) noexcept {
    NitroBluetooth::HybridBluetoothDeviceServiceCharacteristicSpec_cxx swiftPart = NitroBluetooth::HybridBluetoothDeviceServiceCharacteristicSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::bluetooth::HybridBluetoothDeviceServiceCharacteristicSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ cppType) noexcept {
    std::shared_ptr<margelo::nitro::bluetooth::HybridBluetoothDeviceServiceCharacteristicSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::bluetooth::HybridBluetoothDeviceServiceCharacteristicSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridBluetoothDeviceServiceCharacteristicSpec\" is not implemented in Swift!");
    }
    #endif
    NitroBluetooth::HybridBluetoothDeviceServiceCharacteristicSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& /* result */)>
  Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_ create_Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void_std__shared_ptr_HybridBluetoothDeviceServiceCharacteristicSpec_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::shared_ptr<HybridBluetoothDeviceServiceCharacteristicSpec>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>
  Func_void_std__shared_ptr_ArrayBuffer_ create_Func_void_std__shared_ptr_ArrayBuffer_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBluetooth::Func_void_std__shared_ptr_ArrayBuffer_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::shared_ptr<ArrayBuffer>& result) mutable -> void {
      swiftClosure.call(ArrayBufferHolder(result));
    };
  }

} // namespace margelo::nitro::bluetooth::bridge::swift
