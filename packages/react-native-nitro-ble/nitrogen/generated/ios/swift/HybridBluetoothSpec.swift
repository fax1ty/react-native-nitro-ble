///
/// HybridBluetoothSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBluetoothSpec``
public protocol HybridBluetoothSpec_protocol: HybridObject {
  // Properties
  var state: AdapterState { get }

  // Methods
  func scan() throws -> Promise<(any HybridScanHandleSpec)>
  func devices() throws -> [(any HybridBluetoothDeviceSpec)]
}

/// See ``HybridBluetoothSpec``
open class HybridBluetoothSpec_base {
  private weak var cxxWrapper: HybridBluetoothSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridBluetoothSpec_cxx {
  #if DEBUG
    guard self is HybridBluetoothSpec else {
      fatalError("`self` is not a `HybridBluetoothSpec`! Did you accidentally inherit from `HybridBluetoothSpec_base` instead of `HybridBluetoothSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBluetoothSpec_cxx(self as! HybridBluetoothSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Bluetooth HybridObject.
 * Implement this protocol to create Swift-based instances of Bluetooth.
 * ```swift
 * class HybridBluetooth : HybridBluetoothSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBluetoothSpec = HybridBluetoothSpec_protocol & HybridBluetoothSpec_base
