///
/// HybridScanHandleSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridScanHandleSpec``
public protocol HybridScanHandleSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func stop() throws -> Promise<Void>
  func onDevice(callback: @escaping (_ device: (any HybridBluetoothDeviceSpec)) -> Void) throws -> () -> Void
  func onError(callback: @escaping (_ error: Double) -> Void) throws -> () -> Void
}

/// See ``HybridScanHandleSpec``
open class HybridScanHandleSpec_base {
  private weak var cxxWrapper: HybridScanHandleSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridScanHandleSpec_cxx {
  #if DEBUG
    guard self is HybridScanHandleSpec else {
      fatalError("`self` is not a `HybridScanHandleSpec`! Did you accidentally inherit from `HybridScanHandleSpec_base` instead of `HybridScanHandleSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridScanHandleSpec_cxx(self as! HybridScanHandleSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ScanHandle HybridObject.
 * Implement this protocol to create Swift-based instances of ScanHandle.
 * ```swift
 * class HybridScanHandle : HybridScanHandleSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridScanHandleSpec = HybridScanHandleSpec_protocol & HybridScanHandleSpec_base
