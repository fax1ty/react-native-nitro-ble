///
/// HybridBluetoothDeviceServiceCharacteristicSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBluetoothDeviceServiceCharacteristicSpec``
public protocol HybridBluetoothDeviceServiceCharacteristicSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func read() throws -> Promise<ArrayBuffer>
  func write(value: ArrayBuffer) throws -> Promise<Void>
}

/// See ``HybridBluetoothDeviceServiceCharacteristicSpec``
open class HybridBluetoothDeviceServiceCharacteristicSpec_base {
  private weak var cxxWrapper: HybridBluetoothDeviceServiceCharacteristicSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridBluetoothDeviceServiceCharacteristicSpec_cxx {
  #if DEBUG
    guard self is HybridBluetoothDeviceServiceCharacteristicSpec else {
      fatalError("`self` is not a `HybridBluetoothDeviceServiceCharacteristicSpec`! Did you accidentally inherit from `HybridBluetoothDeviceServiceCharacteristicSpec_base` instead of `HybridBluetoothDeviceServiceCharacteristicSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBluetoothDeviceServiceCharacteristicSpec_cxx(self as! HybridBluetoothDeviceServiceCharacteristicSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BluetoothDeviceServiceCharacteristic HybridObject.
 * Implement this protocol to create Swift-based instances of BluetoothDeviceServiceCharacteristic.
 * ```swift
 * class HybridBluetoothDeviceServiceCharacteristic : HybridBluetoothDeviceServiceCharacteristicSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBluetoothDeviceServiceCharacteristicSpec = HybridBluetoothDeviceServiceCharacteristicSpec_protocol & HybridBluetoothDeviceServiceCharacteristicSpec_base
