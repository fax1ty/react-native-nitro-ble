///
/// HybridBluetoothDeviceServiceSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBluetoothDeviceServiceSpec``
public protocol HybridBluetoothDeviceServiceSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func characteristic(uuid: String) throws -> Promise<(any HybridBluetoothDeviceServiceCharacteristicSpec)>
}

/// See ``HybridBluetoothDeviceServiceSpec``
open class HybridBluetoothDeviceServiceSpec_base {
  private weak var cxxWrapper: HybridBluetoothDeviceServiceSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridBluetoothDeviceServiceSpec_cxx {
  #if DEBUG
    guard self is HybridBluetoothDeviceServiceSpec else {
      fatalError("`self` is not a `HybridBluetoothDeviceServiceSpec`! Did you accidentally inherit from `HybridBluetoothDeviceServiceSpec_base` instead of `HybridBluetoothDeviceServiceSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBluetoothDeviceServiceSpec_cxx(self as! HybridBluetoothDeviceServiceSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BluetoothDeviceService HybridObject.
 * Implement this protocol to create Swift-based instances of BluetoothDeviceService.
 * ```swift
 * class HybridBluetoothDeviceService : HybridBluetoothDeviceServiceSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBluetoothDeviceServiceSpec = HybridBluetoothDeviceServiceSpec_protocol & HybridBluetoothDeviceServiceSpec_base
