///
/// HybridBluetoothDeviceSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBluetoothDeviceSpec``
public protocol HybridBluetoothDeviceSpec_protocol: HybridObject {
  // Properties
  var address: String { get }
  var knownName: String { get }
  var state: BluetoothDeviceState { get }

  // Methods
  func connect() throws -> Promise<Void>
  func disconnect() throws -> Promise<Void>
  func service(uuid: String) throws -> Promise<(any HybridBluetoothDeviceServiceSpec)>
}

/// See ``HybridBluetoothDeviceSpec``
open class HybridBluetoothDeviceSpec_base {
  private weak var cxxWrapper: HybridBluetoothDeviceSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridBluetoothDeviceSpec_cxx {
  #if DEBUG
    guard self is HybridBluetoothDeviceSpec else {
      fatalError("`self` is not a `HybridBluetoothDeviceSpec`! Did you accidentally inherit from `HybridBluetoothDeviceSpec_base` instead of `HybridBluetoothDeviceSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBluetoothDeviceSpec_cxx(self as! HybridBluetoothDeviceSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BluetoothDevice HybridObject.
 * Implement this protocol to create Swift-based instances of BluetoothDevice.
 * ```swift
 * class HybridBluetoothDevice : HybridBluetoothDeviceSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBluetoothDeviceSpec = HybridBluetoothDeviceSpec_protocol & HybridBluetoothDeviceSpec_base
