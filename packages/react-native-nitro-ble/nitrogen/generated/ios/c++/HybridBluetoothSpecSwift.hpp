///
/// HybridBluetoothSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBluetoothSpec.hpp"

// Forward declaration of `HybridBluetoothSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridBluetoothSpec_cxx; }

// Forward declaration of `AdapterState` to properly resolve imports.
namespace margelo::nitro::bluetooth { enum class AdapterState; }
// Forward declaration of `HybridScanHandleSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridScanHandleSpec; }
// Forward declaration of `HybridBluetoothDeviceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceSpec; }

#include "AdapterState.hpp"
#include <memory>
#include "HybridScanHandleSpec.hpp"
#include <NitroModules/Promise.hpp>
#include "HybridBluetoothDeviceSpec.hpp"
#include <vector>

#include "NitroBluetooth-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bluetooth {

  /**
   * The C++ part of HybridBluetoothSpec_cxx.swift.
   *
   * HybridBluetoothSpecSwift (C++) accesses HybridBluetoothSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBluetoothSpec_cxx can directly inherit from the C++ class HybridBluetoothSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBluetoothSpecSwift: public virtual HybridBluetoothSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBluetoothSpecSwift(const NitroBluetooth::HybridBluetoothSpec_cxx& swiftPart):
      HybridObject(HybridBluetoothSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroBluetooth::HybridBluetoothSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline AdapterState getState() noexcept override {
      auto __result = _swiftPart.getState();
      return static_cast<AdapterState>(__result);
    }

  public:
    // Methods
    inline std::shared_ptr<Promise<std::shared_ptr<HybridScanHandleSpec>>> scan() override {
      auto __result = _swiftPart.scan();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::vector<std::shared_ptr<HybridBluetoothDeviceSpec>> devices() override {
      auto __result = _swiftPart.devices();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroBluetooth::HybridBluetoothSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::bluetooth
