///
/// HybridScanHandleSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridScanHandleSpec.hpp"

// Forward declaration of `HybridScanHandleSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridScanHandleSpec_cxx; }

// Forward declaration of `HybridBluetoothDeviceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceSpec; }

#include <NitroModules/Promise.hpp>
#include <functional>
#include <memory>
#include "HybridBluetoothDeviceSpec.hpp"

#include "NitroBluetooth-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bluetooth {

  /**
   * The C++ part of HybridScanHandleSpec_cxx.swift.
   *
   * HybridScanHandleSpecSwift (C++) accesses HybridScanHandleSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridScanHandleSpec_cxx can directly inherit from the C++ class HybridScanHandleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridScanHandleSpecSwift: public virtual HybridScanHandleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridScanHandleSpecSwift(const NitroBluetooth::HybridScanHandleSpec_cxx& swiftPart):
      HybridObject(HybridScanHandleSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroBluetooth::HybridScanHandleSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<void>> stop() override {
      auto __result = _swiftPart.stop();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::function<void()> onDevice(const std::function<void(const std::shared_ptr<HybridBluetoothDeviceSpec>& /* device */)>& callback) override {
      auto __result = _swiftPart.onDevice(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::function<void()> onError(const std::function<void(double /* error */)>& callback) override {
      auto __result = _swiftPart.onError(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroBluetooth::HybridScanHandleSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::bluetooth
