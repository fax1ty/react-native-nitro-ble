///
/// HybridBluetoothDeviceSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBluetoothDeviceSpec.hpp"

// Forward declaration of `HybridBluetoothDeviceSpec_cxx` to properly resolve imports.
namespace NitroBluetooth { class HybridBluetoothDeviceSpec_cxx; }

// Forward declaration of `BluetoothDeviceState` to properly resolve imports.
namespace margelo::nitro::bluetooth { enum class BluetoothDeviceState; }
// Forward declaration of `HybridBluetoothDeviceServiceSpec` to properly resolve imports.
namespace margelo::nitro::bluetooth { class HybridBluetoothDeviceServiceSpec; }

#include <string>
#include "BluetoothDeviceState.hpp"
#include <NitroModules/Promise.hpp>
#include <memory>
#include "HybridBluetoothDeviceServiceSpec.hpp"

#include "NitroBluetooth-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bluetooth {

  /**
   * The C++ part of HybridBluetoothDeviceSpec_cxx.swift.
   *
   * HybridBluetoothDeviceSpecSwift (C++) accesses HybridBluetoothDeviceSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBluetoothDeviceSpec_cxx can directly inherit from the C++ class HybridBluetoothDeviceSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBluetoothDeviceSpecSwift: public virtual HybridBluetoothDeviceSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBluetoothDeviceSpecSwift(const NitroBluetooth::HybridBluetoothDeviceSpec_cxx& swiftPart):
      HybridObject(HybridBluetoothDeviceSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroBluetooth::HybridBluetoothDeviceSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline std::string getAddress() noexcept override {
      auto __result = _swiftPart.getAddress();
      return __result;
    }
    inline std::string getKnownName() noexcept override {
      auto __result = _swiftPart.getKnownName();
      return __result;
    }
    inline BluetoothDeviceState getState() noexcept override {
      auto __result = _swiftPart.getState();
      return static_cast<BluetoothDeviceState>(__result);
    }

  public:
    // Methods
    inline std::shared_ptr<Promise<void>> connect() override {
      auto __result = _swiftPart.connect();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> disconnect() override {
      auto __result = _swiftPart.disconnect();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::shared_ptr<HybridBluetoothDeviceServiceSpec>>> service(const std::string& uuid) override {
      auto __result = _swiftPart.service(uuid);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroBluetooth::HybridBluetoothDeviceSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::bluetooth
